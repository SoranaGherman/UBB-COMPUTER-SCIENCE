
%{ 	 
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "lang.tab.h"

  int currentLine = 1;

  typedef struct {
    char* keyword;
    int token;
  } KeywordTokenMap;

  KeywordTokenMap keywordTokenMap[] = {
    {"number", NUMBER},
    {"decimal", DECIMAL},
    {"str", STR},
    {"car", CAR},
    {"$<<", READ},
    {"$>>", WRITE},
    {"let", LET},
    {"seq", SEQ},
    {"loop", WHILE},
    {"vector", VECTOR},
    {"fi", IF},
    {"fie", ELSE},
    {"var", VAR},
    {"in", IN},
    
    {"+", ADD},
    {"-", SUB},
    {"*", MUL},
    {"/", DIV},
    {"%", MOD},

    {"==", EQ},
    {"!=", NE},
    {"<", LT},
    {">", GT},
    {"<=", LE},
    {">=", GE},

    {"=", ASSIGN},

    {"&&", AND},
    {"||", OR},
    {"!", NOT},

    {"{", OPEN_CURLY},
    {"}", CLOSE_CURLY},
    {"(", OPEN_BRACKET},
    {")", CLOSE_BRACKET},
    {"[", OPEN_SQUARE},
    {"]", CLOSE_SQUARE},

    {":", COLON},
    {";", SEMICOLON},
    {",", COMMA},
  };

  int mapKeywordToToken(char* keyword) 
  {
    int size = sizeof(keywordTokenMap) / sizeof(KeywordTokenMap);
    int i = 0;
    for (i = 0; i < size; i++) 
    {
      if (strcmp(keyword, keywordTokenMap[i].keyword) == 0) 
      {
        return keywordTokenMap[i].token;
      }
    }

    printf("Keyword not found: %s\n", keyword);
    return -1;
  }
%} 

%option noyywrap

IDENTIFIER		[a-zA-Z_][a-zA-Z0-9_]*
NUMBER_CONST	0|[+|-]?[1-9][0-9]*([.][0-9]*)?|[+|-]?0[.][0-9]*
STRING_CONST	[\"][a-zA-Z0-9 ]+[\"]
CHAR_CONST		[\'][a-zA-Z0-9 ][\']

%%

"number"|"decimal"|"str"|"car"|"let"|"seq"|"loop"|"vector"|"fi"|"fie"|"$<<"|"$>>"|"var"|"in"		{printf("Reserved word: %s\n", yytext); return mapKeywordToToken(yytext);}
"+"|"-"|"*"|"/"|"%"|"<="|">="|"=="|"!="|"<"|">"|"="|"&&"|"||"		{printf("Operator: %s\n", yytext); return mapKeywordToToken(yytext);}
"{"|"}"|"("|")"|"["|"]"|":"|";"|","|"'"|"\""		{printf("Separator: %s\n", yytext); return mapKeywordToToken(yytext);}
{IDENTIFIER}		{printf("Identifier: %s\n", yytext); return IDENTIFIER;}
{NUMBER_CONST}		{printf("Number: %s\n", yytext); return NUMBER_CONST;}
{STRING_CONST}		{printf("String: %s\n", yytext); return STRING_CONST;}
{CHAR_CONST}		{printf("Character: %s\n", yytext); return CHAR_CONST;}

[ \t]+		{}
[\n]+	{currentLine++;}

[0-9][a-zA-Z0-9_]*		{printf("Illegal identifier at line %d\n", currentLine);}
[+|-]0		{printf("Illegal numeric constant at line %d\n", currentLine);}
[+|-]?[0][0-9]*([.][0-9]*)?		{printf("Illegal numeric constant at line %d\n", currentLine);}
[\'][a-zA-Z0-9 ]{2,}[\']|[\'][a-zA-Z0-9 ][a-zA-Z0-9 ][\']		{printf("Illegal character constant at line %d\n", currentLine);}
[\"][a-zA-Z0-9_]+|[a-zA-Z0-9_]+[\"]		{printf("Illegal string constant at line %d\n", currentLine);}

%%
